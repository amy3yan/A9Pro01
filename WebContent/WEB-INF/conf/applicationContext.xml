<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">


 	
  <!-- Spring MVC配置 -->
    <context:annotation-config />
    <!--扫描注解 -->
    <context:component-scan base-package="com.hand" />
    <!--默认的mvc注解映射的支持 -->
    <mvc:annotation-driven/>
    <!-- 支持异步方法执行 -->
    <task:annotation-driven/>
     <!--读取外部的属性文件配置参数 -->
    <context:property-placeholder location="WEB-INF/conf/datasource.properties" />
    <util:properties id="system" location="WEB-INF/conf/system.properties"/>  
    <bean id="BasicDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">  
        <!-- 数据库基本信息配置 -->        
        <property name="url" value="${oracle.url}"/>      
        <property name="driverClassName" value="${oracle.driver}"/>
        <property name="username" value="${oracle.username}"/>        
        <property name="password" value="${oracle.password}"/>  
               
        <property name="maxIdle" value="${dbcp2.maxIdle}"/>        
        <property name="minIdle" value="${dbcp2.minIdle}"/>        
        <property name="initialSize" value="${dbcp2.initialSize}"/>        
        <property name="timeBetweenEvictionRunsMillis" value="${dbcp2.timeBetweenEvictionRunsMillis}"/> 
        
        <property name="poolPreparedStatements" value="${dbcp2.poolPreparedStatements}"/>        
        <property name="maxOpenPreparedStatements" value="${dbcp2.maxOpenPreparedStatements}"/>        
        <property name="removeAbandonedTimeout" value="${dbcp2.removeAbandonedTimeout}"/>
 
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->        
        <property name="testOnBorrow" value="${dbcp2.testOnBorrow}"/>
 
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->        
        <property name="testOnReturn" value="${dbcp2.testOnReturn}"/>
 
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于
             timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。  -->               
        <property name="testWhileIdle" value="${dbcp2.testWhileIdle}"/>
 
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句,如果validationQuery为
             null，testOnBorrow、testOnReturn、testWhileIdle都不起其作用。 -->            
        <property name="validationQuery" value="${dbcp2.validationQuery}"/>
    </bean>
    <bean id="BasicDataSource2" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">  
        <!-- 数据库基本信息配置 -->        
        <property name="url" value="${SQLServer.url}"/>      
        <property name="driverClassName" value="${SQLServer.driver}"/>
        <property name="username" value="${SQLServer.username}"/>        
        <property name="password" value="${SQLServer.password}"/>  
    </bean>
    <!-- 附件上传 -->
    <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- set the max upload size200MB 注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和-->
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="maxUploadSize">
			<value>204857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg index="0" ref="BasicDataSource"></constructor-arg>
    </bean>
    <!-- 事务处理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="BasicDataSource" />  
    </bean>  
    <tx:annotation-driven transaction-manager="transactionManager" />  
    <!-- 自动加载USER信息到 内存 -->
    <bean id="sqlCache" class="com.hand.common.SqlCache" init-method="init" />
	<!-- 国际化-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">     
	   <property name="basename" value="messages" />                 
	</bean>
	<bean id="springContextUtil " class="com.hand.utils.SpringContextUtil " scope="singleton" />
	<!-- Quartz 定时任务 -->
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="HDLTrigger" />  <!-- HDL库同步任务 -->
			    <ref bean="OrCADTrigger" /> <!--  --> <!-- HDL库同步任务 -->
			</list>
		</property>
		<property name="autoStartup" value="true" />
	</bean>
<!-- HDL任务 -->
	<bean id="HDLTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	   <property name="jobDetail" ref="HDLJobDetail" />
	   <property name="cronExpression" value="0 0/15 * * * ?" /> <!-- [秒] [分] [时] [日] [月] [周] 每隔 1 小时在5分时触发一次 -->
    </bean>
	<bean id="HDLJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="elibJob" />
		<property name="targetMethod" value="synchronizeHDL" />
		<property name="concurrent" value="false" /> <!-- 是否允许任务并发执行。当值为 false 时，表示 必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
<!-- Orcad任务 -->	
	<bean id="OrCADTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
       <property name="jobDetail" ref="OrCADJobDetail" />
       <property name="cronExpression" value="0 0/45 * * * ?" /> <!-- [秒] [分] [时] [日] [月] [周] 每隔 45 分钟触发一次 -->
    </bean>
    <bean id="OrCADJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="elibJob" />
        <property name="targetMethod" value="synchronizeOrCAD" />
        <property name="concurrent" value="false" /> <!-- 是否允许任务并发执行。当值为 false 时，表示 必须等到前一个线程处理完毕后才再启一个新的线程 -->
    </bean>
	<!-- 库同步任务实现Bean -->
	<bean id="elibJob" class="com.hand.elib.jobs.ElibJob"></bean>
</beans>