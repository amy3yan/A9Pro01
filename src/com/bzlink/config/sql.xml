<?xml version="1.0" encoding="UTF-8"?>
<sql-list> 
<!-- BOM基本信息 -->
	<BomBaseInfoSQL>

SELECT 
  I.ID
  , I.ITEM_NUMBER
  , P3.LIST50 AS POOL_ID 
  ,(SELECT NAME FROM USER_GROUP WHERE ID=P3.LIST50) AS POOL_NAME
  ,0 AS BU_ID
  ,'' AS BU_NAME
FROM ITEM I, PAGE_THREE P3
WHERE I.ID=P3.ID AND I.ITEM_NUMBER=?

	</BomBaseInfoSQL>
<!-- BOM使用的PCB信息 -->
	<PCBInfoSQL>

SELECT 
 B.ITEM_NUMBER
 , B.QUANTITY AS QTY
 ,(SELECT LISTAGG(LABEL, ',') WITHIN GROUP(ORDER BY ID) FROM REFDESIG WHERE BOM = B.ID) AS REFDES
FROM ITEM I, BOM B, REV R, CHANGE C
where R.ITEM=B.COMPONENT AND R.RELEASED=1 AND R.LATEST_FLAG=1 AND R.CHANGE=C.ID
AND I.CLASS=10000 AND B.COMPONENT=I.ID AND SUBSTR(B.FLAGS, 4, 2)='11' AND NVL(B.CHANGE_OUT,0)=0 AND B.SITE=0
AND i.subclass=2472919 AND B.ITEM=?    

    </PCBInfoSQL>
<!-- BU基本信息 -->
    <BUInfoSQL>

SELECT 
  U.ID
  , U.NAME
FROM USER_GROUP U 
WHERE EXISTS(SELECT 1 FROM PAGE_THREE P3 
             WHERE U.ID=P3.LIST31 
             AND P3.ID IN (SELECT ID FROM USER_GROUP WHERE NAME=?))

    </BUInfoSQL>
<!-- ChangeOrder类型信息 -->
    <ChangeOrderTypesSQL>

SELECT 
  N.ID
  , N.DESCRIPTION AS NAME
  , N.NAME AS APINAME 
FROM NODETABLE N 
WHERE EXISTS( SELECT 1 FROM PROPERTYTABLE P WHERE P.PARENTID=N.ID AND P.PROPERTYID=40 AND P.VALUE=1)
  AND PARENTID = (SELECT ID FROM NODETABLE WHERE PARENTID=6000 AND OBJTYPE=14)
  AND N.NAME IN ('PDMGeneralProcess', 'MADesignReview', 'Node_2475619', 'Node_2475626', 'CO_0203', 'CO_0204', 'CO_0205', 'CO_0206') -- PDR,SDC,MP,MDR,MDC,CP,CD,HDC
ORDER BY N.DESCRIPTION

    </ChangeOrderTypesSQL>
<!-- 变更基本信息 -->
    <ChangeInfoSQL>

SELECT 
  ID
  , CLASS
  , CHANGE_NUMBER 
  , STATUSTYPE AS STATUS_TYPE
  , DESCRIPTION
  , REASON
  ,(SELECT DESCRIPTION FROM NODETABLE WHERE ID=SUBCLASS) AS CHANGE_TYPE 
  ,(SELECT DESCRIPTION FROM NODETABLE WHERE ID=STATUS) AS STATUS 
FROM CHANGE 
WHERE DELETE_FLAG IS NULL AND CHANGE_NUMBER=?

    </ChangeInfoSQL>
    
<!-- *************** 库同步SQL **************-->

<!-- 同步所有资源池信息 -->
    <SyncPoolsSQL>

MERGE INTO LIB_POOL P
USING (
  SELECT 
	  UG.ID
	  , UG.NAME
	  , (SELECT NAME FROM USER_GROUP WHERE ID=P3.LIST31) AS BU
	FROM USER_GROUP UG, PAGE_THREE P3
	WHERE UG.ID=P3.ID 
	  AND UG.DELETE_FLAG IS NULL 
	  AND UG.ENABLED=1 
	  AND UG.SUBCLASS=2516720
	  AND (SYS_EXTRACT_UTC(FROM_TZ(CAST(UG.MODIFYDATE AS TIMESTAMP), '-8:00')) > (SELECT LAST_RUN_TIME FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:typeapiname)
	     OR NOT EXISTS(SELECT 1 FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:typeapiname))
) A9 ON (A9.ID = P.ID)
WHEN MATCHED THEN
    UPDATE SET P.NAME = A9.NAME, P.BU = A9.BU
WHEN NOT MATCHED THEN 
    INSERT (ID, NAME, BU) VALUES(A9.ID, A9.NAME, A9.BU)

    </SyncPoolsSQL>
<!-- 同步替代组 -->    
    <SyncAlternativeGroup>

MERGE INTO LIB_ALT_GRP G
USING (
  SELECT 
    I.ID, ITEM_NUMBER
    , P3.LIST32 AS POOL_ID
    , (SELECT ITEM_NUMBER FROM ITEM WHERE ID=P3.LIST35) AS CATALOG
    , (SELECT DESCRIPTION FROM NODETABLE WHERE ID=R.RELEASE_TYPE) AS STATUS
  FROM ITEM I, PAGE_THREE P3,  REV R
  WHERE I.ID=P3.ID AND I.ID=R.ITEM AND I.DEFAULT_CHANGE=R.CHANGE 
    AND I.CLASS=9000 AND I.SUBCLASS IN (2512422, 2512404) -- CIG GRP and BU Group
    AND P3.LIST32 IS NOT NULL AND R.RELEASE_TYPE IS NOT NULL
    AND (SYS_EXTRACT_UTC(FROM_TZ(CAST(I.LAST_UPD AS TIMESTAMP), '-8:00')) > (SELECT LAST_RUN_TIME FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:typeapiname)
         OR NOT EXISTS(SELECT 1 FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:typeapiname))
) A9 ON (G.ID = A9.ID)
WHEN MATCHED THEN
    UPDATE SET G.POOL_ID = A9.POOL_ID, G.NAME = A9.ITEM_NUMBER, G.STATUS = A9.STATUS, G.CATALOG = A9.CATALOG
WHEN NOT MATCHED THEN 
    INSERT (ID, POOL_ID, NAME, STATUS, CATALOG) VALUES(A9.ID, A9.POOL_ID, A9.ITEM_NUMBER, A9.STATUS, A9.CATALOG)    
 
    </SyncAlternativeGroup>
    
<!-- 同步替代关系 -->
    <SyncAlternatives>

MERGE INTO LIB_ALTERNATIVE A
USING (
  SELECT 
     B.ITEM, B.COMPONENT
     , (SELECT L.ENTRYVALUE FROM LISTENTRY L WHERE ENTRYID=B.LIST01) AS STATUS
    FROM ITEM I, BOM B
    WHERE B.ITEM=I.ID AND I.CLASS=9000 AND I.SUBCLASS IN (2512422, 2512404)
      AND SUBSTR(B.FLAGS, 4, 2)='11' AND NVL(B.CHANGE_OUT,0)=0 AND B.SITE=0
      AND (SYS_EXTRACT_UTC(FROM_TZ(CAST(I.LAST_UPD AS TIMESTAMP), '-8:00')) > (SELECT LAST_RUN_TIME FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:typeapiname)
             OR NOT EXISTS(SELECT 1 FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:typeapiname))
) A9 ON (A.GRP_ID = A9.ITEM AND A.ITEM_ID = A9.COMPONENT)
WHEN MATCHED THEN
    UPDATE SET A.STATUS = A9.STATUS
WHEN NOT MATCHED THEN 
    INSERT (GRP_ID, ITEM_ID, STATUS) VALUES(A9.ITEM, A9.COMPONENT, A9.STATUS)

    </SyncAlternatives>
    <SyncRemoveDeletedAlternatives>

DELETE FROM LIB_ALTERNATIVE A 
WHERE NOT EXISTS(
  SELECT 1 FROM BOM B, ITEM I 
  WHERE B.ITEM=I.ID AND B.ITEM = A.GRP_ID AND B.COMPONENT = A.ITEM_ID  
    AND SUBSTR(B.FLAGS, 4, 2)='11' AND NVL(B.CHANGE_OUT,0)=0 AND B.SITE=0
    AND I.CLASS=9000 AND I.SUBCLASS IN (2512422, 2512404)
)

    </SyncRemoveDeletedAlternatives>
<!-- 同步PartType的基本信息 -->
    <SyncPartTypeComponentsBaseInfo>

MERGE INTO LIB_COMPONENTS C
USING (
  SELECT 
    I.ID, I.ITEM_NUMBER
    , REGEXP_REPLACE(I.DESCRIPTION, '[''''|]', '_', 1, 0) AS DESCRIPTION
    , (SELECT DESCRIPTION FROM NODETABLE WHERE ID=I.SUBCLASS) AS PART_TYPE
    , (SELECT L.ENTRYVALUE FROM LISTENTRY L WHERE ENTRYID=I.LIST31) AS SUBCLASS
    , REPLACE(SUBSTR((SELECT DESCRIPTION FROM NODETABLE WHERE ID=I.SUBCLASS), 7),'_','|')||'|'||(SELECT L.ENTRYVALUE FROM LISTENTRY L WHERE ENTRYID=I.LIST31) AS TYPES
    , DECODE(R.RELEASE_TYPE, NULL, 'Preliminary', (SELECT DESCRIPTION FROM NODETABLE WHERE ID=R.RELEASE_TYPE)) AS LIFECYCLE
    , REGEXP_REPLACE(MPT.PART_NUMBER, '[''''|]', '_', 1, 0) AS MFG_PART
    , REGEXP_REPLACE(MFR.NAME, '[''''|]', '_', 1, 0) AS MFG
    , :plmurl||'/object/'||(SELECT NAME FROM NODETABLE WHERE ID=I.SUBCLASS)||'/'||I.ITEM_NUMBER AS PLM_URL
    --%__SELECT_ATTRIBUTES__%--
  FROM ITEM_P2P3 I, REV R, MANU_BY MBY, MANU_PARTS MPT, MANUFACTURERS MFR
  WHERE I.ID=R.ITEM AND I.ID(+)=MBY.AGILE_PART AND I.DEFAULT_CHANGE=R.CHANGE AND I.DEFAULT_CHANGE > 0 AND I.CLASS=10000
    AND MBY.MANU_PART=MPT.ID AND MPT.MANU_ID=MFR.ID AND MBY.MANU_PART != 0 AND MBY.ACTIVE = 1 AND NVL(MBY.SITE,0) = 0
    AND EXISTS(SELECT 1 FROM NODETABLE WHERE ID=I.SUBCLASS AND NAME=:apiname)
    AND EXISTS(SELECT 1 FROM ITEM I2 WHERE I2.ID=I.ID 
      AND (SYS_EXTRACT_UTC(FROM_TZ(CAST(I2.LAST_UPD AS TIMESTAMP), '-8:00')) > (SELECT LAST_RUN_TIME FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:apiname)
               OR NOT EXISTS(SELECT 1 FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:apiname)))
  ) A9 ON (C.ID = A9.ID)
WHEN MATCHED THEN
    UPDATE SET C.ITEM_NUMBER = A9.ITEM_NUMBER, C.DESCRIPTION = A9.DESCRIPTION, C.PART_TYPE = A9.PART_TYPE 
             ,C.SUBCLASS = A9.SUBCLASS, C.TYPES = A9.TYPES, C.LIFECYCLE = A9.LIFECYCLE, C.MFG_PART = A9.MFG_PART
             , C.MFG = A9.MFG, C.PLM_URL = A9.PLM_URL
             --%__UPDATE_ATTRIBUTES__%--
WHEN NOT MATCHED THEN 
    INSERT (ID, ITEM_NUMBER, DESCRIPTION, PART_TYPE, SUBCLASS, TYPES, LIFECYCLE, MFG_PART, MFG, PLM_URL
      --%__INSERT_ATTRIBUTES__%--
    ) 
    VALUES(A9.ID, A9.ITEM_NUMBER, A9.DESCRIPTION, A9.PART_TYPE, A9.SUBCLASS, A9.TYPES, A9.LIFECYCLE, A9.MFG_PART, A9.MFG, A9.PLM_URL
      --%__VALUES_ATTRIBUTES__%--
    )
 
    </SyncPartTypeComponentsBaseInfo>
<!-- 同步分类下的私有属性信息 -->
    <SyncPartTypePrivateAttributes>

MERGE INTO LIB_ATTRIBUTES A
USING (
    SELECT 
      I.ID
      , :att_name AS ATT_NAME
      , :att_id AS ATT_ID
      , :enabled AS ENABLED
      , :unit AS ATT_UNIT
      --%__ATT_VALUE__%--
    FROM ITEM_P2P3 I, REV R
    WHERE I.ID=R.ITEM AND I.DEFAULT_CHANGE=R.CHANGE AND I.DEFAULT_CHANGE > 0 AND I.CLASS=10000
      AND EXISTS(SELECT 1 FROM NODETABLE WHERE ID=I.SUBCLASS AND NAME=:apiname)
      AND EXISTS(SELECT 1 FROM ITEM I2 WHERE I2.ID=I.ID 
        AND (SYS_EXTRACT_UTC(FROM_TZ(CAST(I2.LAST_UPD AS TIMESTAMP), '-8:00')) > (SELECT LAST_RUN_TIME FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:apiname)
                 OR NOT EXISTS(SELECT 1 FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:apiname)))
  ) A9 ON (A.ID = A9.ID AND A.ATT_ID = A9.ATT_ID)
WHEN MATCHED THEN
    UPDATE SET A.ATT_NAME = A9.ATT_NAME, A.ENABLED = A9.ENABLED, A.ATT_VALUE = A9.ATT_VALUE, A.ATT_UNIT = A9.ATT_UNIT 
WHEN NOT MATCHED THEN 
    INSERT (ID, ATT_NAME, ATT_ID, ATT_VALUE, ENABLED, ATT_UNIT) VALUES(A9.ID, A9.ATT_NAME, A9.ATT_ID, A9.ATT_VALUE, A9.ENABLED, A9.ATT_UNIT)

    </SyncPartTypePrivateAttributes>
    <SyncRemoveUnabledAttributes>

UPDATE LIB_ATTRIBUTES A 
SET A.ENABLED=1
WHERE EXISTS(SELECT 1 FROM LIB_COMPONENTS C WHERE C.ID = A.ID AND C.PART_TYPE=:parttype)
  AND A.ATT_ID NOT IN (-1
  --%__IN_ATT_IDS__%--
  )
  AND A.ENABLED != 1

    </SyncRemoveUnabledAttributes>
<!-- 更新Run Time时间 -->
    <SyncUpdateRunTime>

MERGE INTO LIB_TYPE_DETAILS D
USING (
  SELECT :apiname AS TYPE_APINAME from DUAL
) A9 ON (A9.TYPE_APINAME = D.TYPE_APINAME)
WHEN MATCHED THEN
    UPDATE SET TYPE_NAME = :type, LAST_RUN_TIME = TO_TIMESTAMP(:time, 'YYYY-MM-DD HH24:MI:SS')
WHEN NOT MATCHED THEN 
    INSERT (TYPE_APINAME, TYPE_NAME, LAST_RUN_TIME) VALUES(:apiname, :type, TO_TIMESTAMP(:time, 'YYYY-MM-DD HH24:MI:SS'))

    </SyncUpdateRunTime>
    
<!-- 更新器件类型及属性配置信息 -->
    <SyncUpdateConfig>
    
MERGE INTO LIB_TYPE_FIELDS F
USING (
  SELECT 
    :typename AS TYPE_NAME
    ,:typeapiname AS TYPE_APINAME
    ,:fieldname AS FIELD_NAME
    ,:fieldid AS FIELD_ID
  FROM DUAL
) A9 ON (A9.TYPE_APINAME = F.TYPE_APINAME AND A9.FIELD_ID = F.FIELD_ID)
WHEN MATCHED THEN
    UPDATE SET TYPE_NAME = :typename, field_name = :fieldname
WHEN NOT MATCHED THEN 
    INSERT (TYPE_APINAME, TYPE_NAME, FIELD_NAME, FIELD_ID) VALUES(A9.TYPE_APINAME, A9.TYPE_NAME, A9.FIELD_NAME, A9.FIELD_ID)   
    
    </SyncUpdateConfig>
    <SyncRemoveUnabledFields>
    
DELETE FROM LIB_TYPE_FIELDS 
WHERE TYPE_APINAME = :apiname 
AND FIELD_ID NOT IN (
-1
--%__FIELD_IDS__%--
)   
    
    </SyncRemoveUnabledFields>
    <GetPartsOfPartTypeInPool>

SELECT C.ID, C.PART_TYPE, C.TYPES, C.ITEM_NUMBER, C.DESCRIPTION, C.LIFECYCLE
  , C.MFG, C.MFG_PART, C.SYMBOL, C.FOOTPRINT, C.PLM_URL, A.STATUS
  , --%__VALUE__%-- AS VALUE
  , --%__PARAMETER__%-- AS PARAMETER
  , --%__MATERIAL__%-- AS MATERIAL
  , --%__PACKAGE__%-- AS PACKAGE
FROM LIB_COMPONENTS C LEFT JOIN LIB_ALTERNATIVE A ON C.ID=A.ITEM_ID
WHERE (A.GRP_ID IS NULL OR A.GRP_ID IN (SELECT ID FROM LIB_ALT_GRP WHERE POOL_ID=(SELECT ID FROM LIB_POOL WHERE NAME=:pool)))
      AND C.PART_TYPE=(SELECT TYPE_NAME FROM LIB_TYPE_DETAILS WHERE TYPE_APINAME=:partapi)      
    
    </GetPartsOfPartTypeInPool>
    <SyncOrCADLibrarys>

IF EXISTS(SELECT 1 FROM [CIS_DB] WHERE [ID] = ?)
    BEGIN
        UPDATE [CIS_DB] SET [CIG Code] = ?, [Description] = ?, [Lifecycle] = ?, [Part Type] = ?
          , [Types] = ?, [Manufacture Part] = ?, [Manufacture] = ?, [Preferred Status] = ?, [Value] = ?
          , [Parameter] = ?, [Material] = ?, [Package] = ?, [FOOTPRINT] = ?, [SYMBOL] = ?, [PLM link] = ?
        WHERE [ID] = ?
    END
ELSE
    BEGIN
        INSERT INTO [CIS_DB] ([ID],[CIG Code],[Description],[Lifecycle],[Part Type],[Types],[Manufacture Part],[Manufacture],[Preferred Status]
                             ,[Value],[Parameter],[Material],[Package],[FOOTPRINT],[SYMBOL],[PLM link])
        VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
    END
     
    
    </SyncOrCADLibrarys>
    
    <SyncDisplayValues>
 UPDATE LIB_COMPONENTS C 
    --%__UPDATE_ATT_VALUE__%--
 WHERE C.PART_TYPE = :part_type   
    
    </SyncDisplayValues>
</sql-list>
